{
    "$defs": {
        "collection": {
            "$id": "/schemas/collection",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
                "entities": {
                    "patternProperties": {
                        "": {
                            "$ref": "/schemas/entity"
                        }
                    },
                    "type": "object"
                },
                "path": {
                    "description": "jmespath to apply to the current level of the document to retrieve a collection",
                    "type": "string"
                },
                "record_transformer": {
                    "description": "An optional python transformer (function, specified as fully qualified function name) to pre-process records before mapping. Used for hard cases, that involve logic beyond the capabilities of the beast mapping (for example, raw-text parsing)",
                    "$ref": "/definitions/fqfn"
                },
                "meta": {
                    "description": "Record level statement meta values",
                    "patternProperties": {
                        "": {
                            "$ref": "/schemas/property"
                        }
                    },
                    "type": "object"
                },
                "collections": {
                    "patternProperties": {
                        "": {
                            "$ref": "/schemas/collection"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "path",
                "entities"
            ],
            "type": "object",
            "additionalProperties": false
        },
        "constant_entity": {
            "$id": "/schemas/constant_entity",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
                "keys": {
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true
                },
                "properties": {
                    "patternProperties": {
                        "": {
                            "anyOf": [
                                {
                                    "$ref": "/schemas/constant_property"
                                },
                                {
                                    "$ref": "/schemas/constant_properties"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "schema": {
                    "description": "Name of the FTM entity to yield",
                    "type": "string"
                }
            },
            "required": [
                "schema",
                "keys",
                "properties"
            ],
            "type": "object"
        },
        "constant_properties": {
            "$id": "/schemas/constant_properties",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "items": {
                "$ref": "/schemas/constant_property"
            },
            "minItems": 1,
            "type": "array"
        },
        "constant_property": {
            "$id": "/schemas/constant_property",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "oneOf": [
                {
                    "required": [
                        "literal"
                    ]
                },
                {
                    "required": [
                        "entity"
                    ]
                }
            ],
            "properties": {
                "entity": {
                    "description": "A name of the entity in the current context to link to",
                    "type": "string"
                },
                "literal": {
                    "description": "A string literal or number to add to all the entities generated from current collection",
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "type": "object"
        },
        "entity": {
            "$id": "/schemas/entity",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "properties": {
                "keys": {
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true
                },
                "properties": {
                    "patternProperties": {
                        "": {
                            "anyOf": [
                                {
                                    "$ref": "/schemas/property"
                                },
                                {
                                    "$ref": "/schemas/properties"
                                }
                            ]
                        }
                    },
                    "type": "object"
                },
                "schema": {
                    "description": "Name of the FTM entity to yield",
                    "type": "string"
                }
            },
            "required": [
                "schema",
                "keys",
                "properties"
            ],
            "type": "object"
        },
        "fqcn": {
            "$id": "/definitions/fqcn",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "pattern": "(?i)^(\\w+)\\.((\\w+).)*(\\w+)$",
            "type": "string",
            "description": "Fully qualified class name (e.g thebeast.digest.SingleProcessDigestor)"
        },
        "fqmn": {
            "$id": "/definitions/fqmn",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "pattern": "(?i)^(\\w+)\\.((\\w+).)*(\\w+)$",
            "type": "string",
            "description": "Fully qualified module name (e.g thebeast.contrib.useful)"
        },
        "fqfn": {
            "$id": "/definitions/fqfn",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "anyOf": [
                {
                    "$ref": "/definitions/fqcn"
                },
                {
                    "properties": {
                        "name": {
                            "$ref": "/definitions/fqcn"
                        },
                        "params": {
                            "type": "object"
                        }
                    },
                    "required": [
                        "name"
                    ],
                    "type": "object"
                }
            ],
            "description": "Fully qualified function name and params (e.g thebeast.contrib.useful.my_function)"
        },
        "properties": {
            "$id": "/schemas/properties",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "description": "An ordered dict (order matters!) of an operations that will be applied to the source record to extract the property of an entity",
            "items": {
                "$ref": "/schemas/property"
            },
            "minItems": 1,
            "type": "array"
        },
        "property": {
            "$id": "/schemas/property",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "description": "A list of instructions on how to get the data for the property and modify/validate it",
            "anyOf": [
                {
                    "required": [
                        "column"
                    ]
                },
                {
                    "required": [
                        "entity"
                    ]
                },
                {
                    "required": [
                        "template"
                    ]
                },
                {
                    "required": [
                        "literal"
                    ]
                },
                {
                    "required": [
                        "property"
                    ]
                }
            ],
            "properties": {
                "augmentor": {
                    "$ref": "/definitions/fqfn",
                    "description": "Fully qualified python function that *appends* a transformation to the list of string values"
                },
                "column": {
                    "description": "A jmespath to extract value(-s) for a given FTM field on a current subdocument",
                    "type": "string"
                },
                "entity": {
                    "description": "A name of the entity in the current context to link to",
                    "type": "string"
                },
                "literal": {
                    "description": "A string literal or number to add to all the entities generated from current collection",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "regex": {
                    "description": "regex to apply to extracted values",
                    "format": "regex",
                    "type": "string"
                },
                "regex_first": {
                    "description": "regex to apply to extracted values and return first match",
                    "format": "regex",
                    "type": "string"
                },
                "regex_replace": {
                    "description": "regex or regex list to apply to extracted values for replacing substring(-s)",
                    "properties": {
                        "regex": {
                            "format": "regex",
                            "type": [
                                "string",
                                "array"
                            ]
                        },
                        "replace": {
                            "type": "string",
                            "type": [
                                "string",
                                "array"
                            ]
                        }
                    },
                    "required": [
                        "regex",
                        "replace"
                    ],
                    "type": "object"
                },
                "split_regex": {
                    "description": "regex to split extracted values with",
                    "format": "regex",
                    "type": "string"
                },
                "template": {
                    "description": "Jinja2 template which can resolve variables through the jmespath",
                    "type": "string"
                },
                "property": {
                    "description": "Gets the values from a property of the current (incomplete) entity or variable",
                    "type": "string"
                },
                "transformer": {
                    "$ref": "/definitions/fqfn",
                    "description": "Fully qualified python function that *applies* a transformation to the list of string values"
                },
                "meta": {
                    "description": "Property level meta values",
                    "patternProperties": {
                        "": {
                            "anyOf": [
                                {
                                    "$ref": "/schemas/property"
                                },
                                {
                                    "$ref": "/schemas/properties"
                                }
                            ]
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "$schema": "http://json-schema.org/draft-07/schema#",
    "properties": {
        "digest": {
            "properties": {
                "cls": {
                    "allOf": [
                        {
                            "$ref": "/definitions/fqcn"
                        }
                    ],
                    "default": "thebeast.digest.SingleProcessDigestor",
                    "description": "Fully qualified python class name for the digestor"
                },
                "collections": {
                    "patternProperties": {
                        "": {
                            "$ref": "/schemas/collection"
                        }
                    },
                    "type": "object"
                },
                "constant_entities": {
                    "description": "Entities that should be generated for the file, but not from the data",
                    "patternProperties": {
                        "": {
                            "$ref": "/schemas/constant_entity"
                        }
                    },
                    "type": "object"
                },
                "meta": {
                    "description": "Datasource level statement meta values for all the collections",
                    "patternProperties": {
                        "": {
                            "$ref": "/schemas/constant_property"
                        }
                    },
                    "type": "object"
                },
                "import": {
                    "description": "List of third-party packaged or contribs with transformers and jinja routines to import and use in the mapping",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "collections"
            ],
            "type": "object"
        },
        "dump": {
            "properties": {
                "cls": {
                    "allOf": [
                        {
                            "$ref": "/definitions/fqcn"
                        }
                    ],
                    "description": "Fully qualified python class name dumper, which is derived from []"
                },
                "params": {
                    "properties": {
                        "output_uri": {
                            "type": "string",
                            "description": "An uri to write valid entities to"
                        },
                        "error_uri": {
                            "type": "string",
                            "description": "An uri to write degenerated entities to",
                            "default": "/dev/null"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        },
        "ftm_ontology": {
            "description": "Optional path to the dir with a custom FTM ontology to use",
            "type": "string"
        },
        "meta": {
            "description": "Optional list of statements meta fields (if omitted, the default DEFAULT_META_FIELDS is used)",
            "items": {
                "type": "string"
            },
            "type": "array"
        },
        "id": {
            "description": "(Somewhat) unique id of the mapping",
            "type": "string"
        },
        "ingest": {
            "properties": {
                "cls": {
                    "allOf": [
                        {
                            "$ref": "/definitions/fqcn"
                        }
                    ],
                    "description": "Fully qualified python class name, which is derived from AbstractIngestor"
                },
                "params": {
                    "properties": {
                        "input_uri": {
                            "type": "string"
                        },
                        "input_encoding": {
                            "type": "string",
                            "description": "Encoding of the input file"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "cls"
            ],
            "type": "object"
        },
        "info": {
            "properties": {
                "author": {
                    "description": "Optional reference to the mapping authors",
                    "type": "string"
                },
                "comments": {
                    "description": "Optional comments",
                    "type": "string"
                },
                "created": {
                    "format": "date-time",
                    "type": "string"
                },
                "maintainer": {
                    "description": "Optional reference to the maintainers of this mapping",
                    "type": "string"
                },
                "modified": {
                    "format": "date-time",
                    "type": "string"
                },
                "publisher": {
                    "description": "Optional reference to publisher of source data",
                    "type": "string"
                },
                "tags": {
                    "description": "Optional arbitrary list of mapping tags, e.g. 'unofficial', 'government', etc",
                    "type": "array",
                    "uniqueItems": true
                },
                "title": {
                    "description": "Optional title for the mapping",
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "required": [
        "id",
        "ingest",
        "digest",
        "dump"
    ],
    "type": "object"
}